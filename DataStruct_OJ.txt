一、书序表和链表
1、https://leetcode-cn.com/problems/remove-linked-list-elements/description/ [删除链表中等于给定值 val 的所有节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head == NULL)
        return NULL;
    struct ListNode *p = head;
    struct ListNode *pre = NULL; //要删除节点前驱节点
   
    while(p != NULL)
    {
        if(p->val == val)
        {
            if(pre == NULL)
                head = p->next;
            else
                pre->next = p->next;
            free(p);
        }
        else
            pre = p;
            
        if(pre == NULL)
            p = head;
        else
            p = pre->next;
    }
    return head;
}

2、https://leetcode-cn.com/problems/reverse-linked-list/description/ [反转链表]
struct ListNode* reverseList(struct ListNode* head)
{
    if(head==NULL || head->next==NULL)  
        return head;
    struct ListNode *p = head->next;
    head->next = NULL;

    while(p != NULL)
    {
        struct ListNode *q = p->next;
        p->next = head;
        head = p;

        p = q;
    }
    return head;
}

3、https://leetcode-cn.com/problems/middle-of-the-linked-list/description/ [链表的中间结点]
//常规解法
int GetLengthOfList(struct ListNode *head)
{
    int len = 0;
    while(head != NULL)
    {
        len++;
        head = head->next;
    }
    return len;
}

struct ListNode* middleNode(struct ListNode* head)
{
    int len = GetLengthOfList(head);
    struct ListNode *p = head;
    for(int i=0; i<len/2; ++i)
        p = p->next;
    return p;
}
//快慢指针法
struct ListNode* middleNode(struct ListNode* head)
{
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

4、https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&&tqId=11167&rp=2&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [倒数的第K个节点]
/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 */

/**
 * 
 * @param pListHead ListNode类 
 * @param k int整型 
 * @return ListNode类
 */

struct ListNode* FindKthToTail(struct ListNode* pListHead, int k ) 
{
    if(pListHead == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = pListHead;
    while(k-- > 0)
    {
        if(fast == NULL)//用于判断是否超出节点的个数
            return NULL;
        fast = fast->next;
    }
    
    while(fast != NULL)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return slow;
}

5、https://leetcode-cn.com/problems/merge-two-sorted-lists/description/ [合并两个有序链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)
{
    if(l1==NULL && l2==NULL)
        return NULL;
    if(l1 == NULL)
        return l2;
    if(l2 == NULL)
        return l1;
    
    struct ListNode *head;
    if(l1->val < l2->val)
    {
        head = l1;
        l1 = l1->next;
    }
    else    
    {
        head = l2;
        l2 = l2->next;
    }
    struct ListNode *tail = head;
    while(l1!=NULL && l2!=NULL)
    {
        if(l1->val < l2->val)
        {
            tail->next = l1;
            l1 = l1->next;
        }
        else
        {
            tail->next = l2;
            l2 = l2->next;
        }
        tail = tail->next;
    }
    if(l1 != NULL)
        tail->next = l1;
    if(l2 != NULL)
        tail->next = l2;
    return head;
}

6、https://www.nowcoder.com/practice/0e27e0b064de4eacac178676ef9c9d70?tpId=8&&tqId=11004&rp=2&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking [链表分割]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Partition {
public:
    ListNode* partition(ListNode* pHead, int x) 
    {
        // write code here
        if(pHead == NULL)
            return NULL;
        ListNode *less, *lessTail, *great, *greatTail;
        less = lessTail = (ListNode*)malloc(sizeof(ListNode));
        great = greatTail = (ListNode*)malloc(sizeof(ListNode));
        
        //分割链表
        while(pHead != NULL)
        {
            if(pHead->val < x)
            {
                lessTail->next = pHead;
                lessTail = lessTail->next;
            }
            else
            {
                greatTail->next = pHead;
                greatTail = greatTail->next;
            }
            pHead = pHead->next;
        }
        
        //合并链表
        lessTail->next = great->next;
        greatTail->next = NULL;   //预防出现循环情况
        pHead = less->next;
        free(less);
        free(great);
        
        return pHead;
    }
};

7、https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&&tqId=11209&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [删除该链表中重复的结点]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/

class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(pHead==NULL || pHead->next==NULL)
            return pHead;
        ListNode *pre = NULL;
        ListNode *cur = pHead;
        ListNode *next_node = pHead->next;
        
        while(next_node != NULL)
        {
            if(cur->val != next_node->val) // 重复值出现
            {
                pre = cur;
                cur = next_node;
                next_node = next_node->next;
            }
            else
            {
                while(next_node && next_node->val==cur->val)
                    next_node = next_node->next;
                
                if(pre == NULL)
                    pHead = next_node;
                else
                    pre->next = next_node;
                
                //删除重复节点
                while(cur != next_node)
                {
                    ListNode *p = cur;
                    cur = cur->next;
                    free(p);
                }
                if(next_node != NULL)
                    next_node = next_node->next;
            }
        }
        return pHead;
    }
};

8、https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking [链表的回文结构]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) 
    {
        // write code here
        if(A == NULL)
            return true;
        
        int ar[900] = {0};
        int i = 0;
        ListNode *p = A;
        while(p != NULL)
        {
            ar[i++] = p->val;
            p = p->next;
        }
        
        int start = 0, end = i-1;
        while(start < end)
        {
            if(ar[start] != ar[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
};

9、https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/ [第一个公共结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

int GetLengthOfList(struct ListNode *head)
{
    int len = 0;
    while(head != NULL)
    {
        len++;
        head = head->next;
    }
    return len;
}

struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) 
{
    if(headA==NULL || headB==NULL)
        return NULL;
    
    int lenA = GetLengthOfList(headA);
    int lenB = GetLengthOfList(headB);

    struct ListNode *longList, *shortList;
    if(lenA > lenB)
    {
        longList = headA;
        shortList = headB;
    }
    else
    {
        longList = headB;
        shortList = headA;
    }
    int offset = abs(lenA - lenB);
    while(offset-- > 0)
        longList = longList->next;
    
    while(longList != NULL)
    {
        if(shortList == longList)
            return longList;
        shortList = shortList->next;
        longList = longList->next;
    }

    return NULL;
}

10、 https://leetcode-cn.com/problems/linked-list-cycle/description/  [判断链表中是否有环]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) 
{
    if(head == NULL)
        return false;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;

        if(fast == slow)
            return true;
    }    
    return false;
}















