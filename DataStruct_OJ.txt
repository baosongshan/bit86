一、书序表和链表
1、https://leetcode-cn.com/problems/remove-linked-list-elements/description/ [删除链表中等于给定值 val 的所有节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* removeElements(struct ListNode* head, int val)
{
    if(head == NULL)
        return NULL;
    struct ListNode *p = head;
    struct ListNode *pre = NULL; //要删除节点前驱节点
   
    while(p != NULL)
    {
        if(p->val == val)
        {
            if(pre == NULL)
                head = p->next;
            else
                pre->next = p->next;
            free(p);
        }
        else
            pre = p;
            
        if(pre == NULL)
            p = head;
        else
            p = pre->next;
    }
    return head;
}

2、https://leetcode-cn.com/problems/reverse-linked-list/description/ [反转链表]
struct ListNode* reverseList(struct ListNode* head)
{
    if(head==NULL || head->next==NULL)  
        return head;
    struct ListNode *p = head->next;
    head->next = NULL;

    while(p != NULL)
    {
        struct ListNode *q = p->next;
        p->next = head;
        head = p;

        p = q;
    }
    return head;
}

3、https://leetcode-cn.com/problems/middle-of-the-linked-list/description/ [链表的中间结点]
//常规解法
int GetLengthOfList(struct ListNode *head)
{
    int len = 0;
    while(head != NULL)
    {
        len++;
        head = head->next;
    }
    return len;
}

struct ListNode* middleNode(struct ListNode* head)
{
    int len = GetLengthOfList(head);
    struct ListNode *p = head;
    for(int i=0; i<len/2; ++i)
        p = p->next;
    return p;
}
//快慢指针法
struct ListNode* middleNode(struct ListNode* head)
{
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}

4、https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&&tqId=11167&rp=2&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [倒数的第K个节点]
/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 */

/**
 * 
 * @param pListHead ListNode类 
 * @param k int整型 
 * @return ListNode类
 */

struct ListNode* FindKthToTail(struct ListNode* pListHead, int k ) 
{
    if(pListHead == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = pListHead;
    while(k-- > 0)
    {
        if(fast == NULL)//用于判断是否超出节点的个数
            return NULL;
        fast = fast->next;
    }
    
    while(fast != NULL)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return slow;
}

5、https://leetcode-cn.com/problems/merge-two-sorted-lists/description/ [合并两个有序链表]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2)
{
    if(l1==NULL && l2==NULL)
        return NULL;
    if(l1 == NULL)
        return l2;
    if(l2 == NULL)
        return l1;
    
    struct ListNode *head;
    if(l1->val < l2->val)
    {
        head = l1;
        l1 = l1->next;
    }
    else    
    {
        head = l2;
        l2 = l2->next;
    }
    struct ListNode *tail = head;
    while(l1!=NULL && l2!=NULL)
    {
        if(l1->val < l2->val)
        {
            tail->next = l1;
            l1 = l1->next;
        }
        else
        {
            tail->next = l2;
            l2 = l2->next;
        }
        tail = tail->next;
    }
    if(l1 != NULL)
        tail->next = l1;
    if(l2 != NULL)
        tail->next = l2;
    return head;
}

6、https://www.nowcoder.com/practice/0e27e0b064de4eacac178676ef9c9d70?tpId=8&&tqId=11004&rp=2&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking [链表分割]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class Partition {
public:
    ListNode* partition(ListNode* pHead, int x) 
    {
        // write code here
        if(pHead == NULL)
            return NULL;
        ListNode *less, *lessTail, *great, *greatTail;
        less = lessTail = (ListNode*)malloc(sizeof(ListNode));
        great = greatTail = (ListNode*)malloc(sizeof(ListNode));
        
        //分割链表
        while(pHead != NULL)
        {
            if(pHead->val < x)
            {
                lessTail->next = pHead;
                lessTail = lessTail->next;
            }
            else
            {
                greatTail->next = pHead;
                greatTail = greatTail->next;
            }
            pHead = pHead->next;
        }
        
        //合并链表
        lessTail->next = great->next;
        greatTail->next = NULL;   //预防出现循环情况
        pHead = less->next;
        free(less);
        free(great);
        
        return pHead;
    }
};

7、https://www.nowcoder.com/practice/fc533c45b73a41b0b44ccba763f866ef?tpId=13&&tqId=11209&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking [删除该链表中重复的结点]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/

class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(pHead==NULL || pHead->next==NULL)
            return pHead;
        ListNode *pre = NULL;
        ListNode *cur = pHead;
        ListNode *next_node = pHead->next;
        
        while(next_node != NULL)
        {
            if(cur->val != next_node->val) // 重复值出现
            {
                pre = cur;
                cur = next_node;
                next_node = next_node->next;
            }
            else
            {
                while(next_node && next_node->val==cur->val)
                    next_node = next_node->next;
                
                if(pre == NULL)
                    pHead = next_node;
                else
                    pre->next = next_node;
                
                //删除重复节点
                while(cur != next_node)
                {
                    ListNode *p = cur;
                    cur = cur->next;
                    free(p);
                }
                if(next_node != NULL)
                    next_node = next_node->next;
            }
        }
        return pHead;
    }
};

8、https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking [链表的回文结构]
/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};*/
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) 
    {
        // write code here
        if(A == NULL)
            return true;
        
        int ar[900] = {0};
        int i = 0;
        ListNode *p = A;
        while(p != NULL)
        {
            ar[i++] = p->val;
            p = p->next;
        }
        
        int start = 0, end = i-1;
        while(start < end)
        {
            if(ar[start] != ar[end])
                return false;
            start++;
            end--;
        }
        return true;
    }
};

9、https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/ [第一个公共结点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

int GetLengthOfList(struct ListNode *head)
{
    int len = 0;
    while(head != NULL)
    {
        len++;
        head = head->next;
    }
    return len;
}

struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) 
{
    if(headA==NULL || headB==NULL)
        return NULL;
    
    int lenA = GetLengthOfList(headA);
    int lenB = GetLengthOfList(headB);

    struct ListNode *longList, *shortList;
    if(lenA > lenB)
    {
        longList = headA;
        shortList = headB;
    }
    else
    {
        longList = headB;
        shortList = headA;
    }
    int offset = abs(lenA - lenB);
    while(offset-- > 0)
        longList = longList->next;
    
    while(longList != NULL)
    {
        if(shortList == longList)
            return longList;
        shortList = shortList->next;
        longList = longList->next;
    }

    return NULL;
}

10、 https://leetcode-cn.com/problems/linked-list-cycle/description/  [判断链表中是否有环]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
bool hasCycle(struct ListNode *head) 
{
    if(head == NULL)
        return false;
    struct ListNode *fast, *slow;
    fast = slow = head;
    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;

        if(fast == slow)
            return true;
    }    
    return false;
}

11、https://leetcode-cn.com/problems/linked-list-cycle-ii/description/ [入环的第一个节点]
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) 
{
    if(head == NULL)
        return NULL;
    struct ListNode *fast, *slow;
    fast = slow = head;

    while(fast && fast->next!=NULL)
    {
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow)
            break;
    }

    if(fast==NULL || fast->next==NULL)
        return NULL;
    
    fast = head;
    while(fast != slow)
    {
        fast = fast->next;
        slow = slow->next;
    }
    return fast;
}

12、https://leetcode-cn.com/problems/copy-list-with-random-pointer/description/ [链表的深度拷贝]
/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *next;
 *     struct Node *random;
 * };
 */

//拷贝链表
void copyList(struct Node *head)
{
    struct Node *p = head;
    while(p != NULL)
    {
        struct Node *s = (struct Node*)malloc(sizeof(struct Node));
        s->val = p->val;
        s->random= NULL;
        s->next = p->next;
        p->next = s;

        p = s->next;
    }
}

//拷贝随机指针
void copyRandom(struct Node *head)
{
    struct Node *p = head;
    while(p != NULL)
    {
        struct Node *pclone = p->next;
        if(p->random != NULL)
            pclone->random = p->random->next;
        
        p = pclone->next;
    }    
}

// 拆分链表
struct Node* splitList(struct Node *head)
{
    struct Node *p = head;
    struct Node *phead = p->next;

    struct Node *pclone = phead;  //充当尾指针
    while(p != NULL)
    {
        p->next = pclone->next;
        p = p->next;
        if(p != NULL)
            pclone->next = p->next;
        pclone = pclone->next;
    }
    return phead;
}

struct Node* copyRandomList(struct Node* head) 
{
    if(head == NULL)
        return NULL;
        
    copyList(head);
    copyRandom(head);
    return splitList(head);
}


二、栈和队列
1、https://leetcode-cn.com/problems/valid-parentheses/ [括号匹配]

//链栈

#define StackElemType char

typedef struct LinkStackNode
{
	StackElemType data;
	struct LinkStackNode *next;
}LinkStackNode;
typedef struct LinkStack
{
	LinkStackNode *head;
}LinkStack;

void LinkStackInit(LinkStack *pst);
void LinkStackDestroy(LinkStack *pst);
void LinkStackPush(LinkStack *pst, StackElemType x);
void LinkStackPop(LinkStack *pst);
StackElemType LinkStackTop(LinkStack *pst);
bool LinkStackIsEmpty(LinkStack *pst);

void LinkStackInit(LinkStack *pst)
{
	assert(pst);
	pst->head = NULL;
}

void LinkStackPush(LinkStack *pst, StackElemType x)
{
	assert(pst);
	LinkStackNode *s = (LinkStackNode*)malloc(sizeof(LinkStackNode));
	assert(s != NULL);
	s->data = x;

	s->next = pst->head;
	pst->head = s;
}

void LinkStackPop(LinkStack *pst)
{
	assert(pst);
	if(pst->head != NULL)
	{
		LinkStackNode *p = pst->head;
		pst->head = p->next;
		free(p);
	}
}

StackElemType LinkStackTop(LinkStack *pst)
{
	assert(pst && pst->head != NULL);
	return pst->head->data;
}

void LinkStackDestroy(LinkStack *pst)
{
	assert(pst);
	while(pst->head != NULL)
	{
		LinkStackNode *p = pst->head;
		pst->head = p->next;
		free(p);
	}
}
bool LinkStackIsEmpty(LinkStack *pst)
{return pst->head == NULL;}
///////////////////////////////////////////////////////////////
bool isValid(char * s)
{
    if(s==NULL || *s=='\0')
        return true;

    LinkStack st;
    LinkStackInit(&st);

    while(*s != '\0')
    {
        if(*s=='(' || *s=='[' || *s=='{')
        {
            LinkStackPush(&st, *s); 
        }
        else
        {
            if(LinkStackIsEmpty(&st))
                return false;
            char top_val = LinkStackTop(&st);
            if( (*s==')' && top_val!='(')
              ||(*s==']' && top_val!='[')
              ||(*s=='}' && top_val!='{'))
              return false;
            LinkStackPop(&st);  
        }
        s++;
    }
    if(LinkStackIsEmpty(&st))
        return true;
    return false;
}

//数组模拟栈的实现法
bool isValid(char * s)
{
    if(s==NULL || *s=='\0')
        return true;

    int len = strlen(s);
    char *st = (char*)malloc(sizeof(char) * len); //模拟栈
    int top = 0;

    while(*s != '\0')
    {
        if(*s=='(' || *s=='[' || *s=='{')
        {
            st[top++] = *s; //入栈
        }
        else
        {
            if(top == 0)
                return false;
            char top_val = st[top-1];
            if( (*s==')' && top_val!='(')
              ||(*s==']' && top_val!='[')
              ||(*s=='}' && top_val!='{'))
              return false;
            top--; //出栈
        }
        s++;
    }
    if(top == 0)
        return true;
    return false;
}

2、https://leetcode-cn.com/problems/implement-stack-using-queues/ [用队列实现栈]

#define QueueElemType int
//链队列
typedef struct LinkQueueNode
{
	QueueElemType data;
	struct LinkQueueNode *next;
}LinkQueueNode;

typedef struct LinkQueue
{
	LinkQueueNode *head;
	LinkQueueNode *tail; //指向队尾节点
}LinkQueue;

void LinkQueueInit(LinkQueue *pq);
void LinkQueueDestroy(LinkQueue *pq);
void LinkQueueEn(LinkQueue *pq, QueueElemType x);
void LinkQueueDe(LinkQueue *pq);
void LinkQueueShow(LinkQueue *pq);
QueueElemType LinkQueueBack(LinkQueue *pq);
QueueElemType LinkQueueFront(LinkQueue *pq);
bool LinkQueueEmpty(LinkQueue *pq);

void LinkQueueInit(LinkQueue *pq)
{
	assert(pq);
	pq->head = pq->tail = NULL;
}

void LinkQueueEn(LinkQueue *pq, QueueElemType x)
{
	assert(pq);
	LinkQueueNode *s = (LinkQueueNode *)malloc(sizeof(LinkQueueNode));
	assert(s != NULL);
	s->data = x;
	s->next = NULL;
	if(pq->head == NULL)
		pq->head = pq->tail = s;
	else
	{
		pq->tail->next = s;
		pq->tail = s;
	}
}

void LinkQueueDe(LinkQueue *pq)
{
	assert(pq);
	if(pq->head != NULL)
	{
		LinkQueueNode *p = pq->head;
		pq->head = p->next;
		if(pq->head == NULL)
			pq->tail = NULL;
		free(p);
	}
}

void LinkQueueShow(LinkQueue *pq)
{
	assert(pq != NULL);
	LinkQueueNode *p = pq->head;
	while(p != NULL)
	{
		printf("%d<--", p->data);
		p = p->next;
	}
	printf("Nil.\n");
}

QueueElemType LinkQueueBack(LinkQueue *pq)
{
	assert(pq && pq->head);
	return pq->tail->data;
}
QueueElemType LinkQueueFront(LinkQueue *pq)
{
	assert(pq && pq->head);
	return pq->head->data;
}

void LinkQueueDestroy(LinkQueue *pq)
{
	assert(pq);
	while(pq->head != NULL)
	{
		LinkQueueNode *p = pq->head;
		pq->head = p->next;
		free(p);
	}
	pq->head = pq->tail = NULL;
}

bool LinkQueueEmpty(LinkQueue *pq)
{return pq->head == NULL;}

//////////////////////////////////////////////////////////////////
typedef struct 
{
    LinkQueue q1;
    LinkQueue q2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() 
{
    MyStack *pst = (MyStack*)malloc(sizeof(MyStack));
    LinkQueueInit(&(pst->q1));
    LinkQueueInit(&(pst->q2));

    return pst;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) 
{
    LinkQueue *pnoempty;
    if(LinkQueueEmpty(&(obj->q1)))
        pnoempty = &(obj->q2);
    else
        pnoempty = &(obj->q1);
    LinkQueueEn(pnoempty, x);
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) 
{
    LinkQueue *pnoempty, *pempty;
    if(LinkQueueEmpty(&(obj->q1)))
    {
        pempty = &(obj->q1);
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
        pempty = &(obj->q2);
    }

    int val;
    while(!LinkQueueEmpty(pnoempty))
    {
        val = LinkQueueFront(pnoempty);
        LinkQueueDe(pnoempty);
        if(LinkQueueEmpty(pnoempty))  //是否是最后一个元素出队
            break;
        LinkQueueEn(pempty, val);
    }
    return val;
}

/** Get the top element. */
int myStackTop(MyStack* obj) 
{
    LinkQueue *pnoempty, *pempty;
    if(LinkQueueEmpty(&(obj->q1)))
    {
        pempty = &(obj->q1);
        pnoempty = &(obj->q2);
    }
    else
    {
        pnoempty = &(obj->q1);
        pempty = &(obj->q2);
    }

    int val;
    while(!LinkQueueEmpty(pnoempty))
    {
        val = LinkQueueFront(pnoempty);
        LinkQueueDe(pnoempty);
        LinkQueueEn(pempty, val);
    }
    return val;
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) 
{
    return LinkQueueEmpty(&(obj->q1)) && LinkQueueEmpty(&(obj->q2));
}

void myStackFree(MyStack* obj) 
{
    LinkQueueDestroy(&(obj->q1));
    LinkQueueDestroy(&(obj->q2));
    free(obj);
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/

3、https://leetcode-cn.com/problems/implement-queue-using-stacks/  [用栈实现队列]
//链栈
#define StackElemType int
typedef struct LinkStackNode
{
	StackElemType data;
	struct LinkStackNode *next;
}LinkStackNode;
typedef struct LinkStack
{
	LinkStackNode *head;
}LinkStack;

void LinkStackInit(LinkStack *pst);
void LinkStackDestroy(LinkStack *pst);
void LinkStackPush(LinkStack *pst, StackElemType x);
void LinkStackPop(LinkStack *pst);
StackElemType LinkStackTop(LinkStack *pst);
void LinkStackShow(LinkStack *pst);
bool LinkStackIsEmpty(LinkStack *pst)
{return pst->head == NULL;}

void LinkStackInit(LinkStack *pst)
{
	assert(pst);
	pst->head = NULL;
}

void LinkStackPush(LinkStack *pst, StackElemType x)
{
	assert(pst);
	LinkStackNode *s = (LinkStackNode*)malloc(sizeof(LinkStackNode));
	assert(s != NULL);
	s->data = x;

	s->next = pst->head;
	pst->head = s;
}

void LinkStackPop(LinkStack *pst)
{
	assert(pst);
	if(pst->head != NULL)
	{
		LinkStackNode *p = pst->head;
		pst->head = p->next;
		free(p);
	}
}

StackElemType LinkStackTop(LinkStack *pst)
{
	assert(pst && pst->head != NULL);
	return pst->head->data;
}

void LinkStackShow(LinkStack *pst)
{
	assert(pst);
	LinkStackNode *p = pst->head;
	while(p != NULL)
	{
		printf("%d\n", p->data);
		p = p->next;
	}
}

void LinkStackDestroy(LinkStack *pst)
{
	assert(pst);
	while(pst->head != NULL)
	{
		LinkStackNode *p = pst->head;
		pst->head = p->next;
		free(p);
	}
}

///////////////////////////////////////////////////////////////
typedef struct 
{
    LinkStack st1; //push data
    LinkStack st2; //pop  data
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() 
{
    MyQueue *pq = (MyQueue*)malloc(sizeof(MyQueue));
    LinkStackInit(&(pq->st1));
    LinkStackInit(&(pq->st2));
    return pq;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) 
{
    LinkStackPush(&(obj->st1), x);
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) 
{
    if(LinkStackIsEmpty(&(obj->st2)))
    {
        while(!LinkStackIsEmpty(&(obj->st1)))
        {
            LinkStackPush(&(obj->st2), LinkStackTop(&(obj->st1)));
            LinkStackPop(&(obj->st1));
        }
    }
    int val = LinkStackTop(&(obj->st2));
    LinkStackPop(&(obj->st2));
    return val;
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) 
{
    if(LinkStackIsEmpty(&(obj->st2)))
    {
        while(!LinkStackIsEmpty(&(obj->st1)))
        {
            LinkStackPush(&(obj->st2), LinkStackTop(&(obj->st1)));
            LinkStackPop(&(obj->st1));
        }
    }
    int val = LinkStackTop(&(obj->st2));
    return val;
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) 
{
    return LinkStackIsEmpty(&(obj->st1)) && LinkStackIsEmpty(&(obj->st2));
}

void myQueueFree(MyQueue* obj) 
{
    LinkStackDestroy(&(obj->st1));
    LinkStackDestroy(&(obj->st2));
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/

4、https://leetcode-cn.com/problems/min-stack/ [最小栈]

//链栈
#define StackElemType int
typedef struct LinkStackNode
{
	StackElemType data;
	struct LinkStackNode *next;
}LinkStackNode;
typedef struct LinkStack
{
	LinkStackNode *head;
}LinkStack;

void LinkStackInit(LinkStack *pst);
void LinkStackDestroy(LinkStack *pst);
void LinkStackPush(LinkStack *pst, StackElemType x);
void LinkStackPop(LinkStack *pst);
StackElemType LinkStackTop(LinkStack *pst);
void LinkStackShow(LinkStack *pst);
bool LinkStackIsEmpty(LinkStack *pst)
{return pst->head == NULL;}

void LinkStackInit(LinkStack *pst)
{
	assert(pst);
	pst->head = NULL;
}

void LinkStackPush(LinkStack *pst, StackElemType x)
{
	assert(pst);
	LinkStackNode *s = (LinkStackNode*)malloc(sizeof(LinkStackNode));
	assert(s != NULL);
	s->data = x;

	s->next = pst->head;
	pst->head = s;
}

void LinkStackPop(LinkStack *pst)
{
	assert(pst);
	if(pst->head != NULL)
	{
		LinkStackNode *p = pst->head;
		pst->head = p->next;
		free(p);
	}
}

StackElemType LinkStackTop(LinkStack *pst)
{
	assert(pst && pst->head != NULL);
	return pst->head->data;
}

void LinkStackShow(LinkStack *pst)
{
	assert(pst);
	LinkStackNode *p = pst->head;
	while(p != NULL)
	{
		printf("%d\n", p->data);
		p = p->next;
	}
}

void LinkStackDestroy(LinkStack *pst)
{
	assert(pst);
	while(pst->head != NULL)
	{
		LinkStackNode *p = pst->head;
		pst->head = p->next;
		free(p);
	}
}


////////////////////////////////////////////////////////////
typedef struct 
{
    LinkStack st;
    LinkStack min_st; //
}MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() 
{
    MinStack *pst = (MinStack *)malloc(sizeof(MinStack));
    LinkStackInit(&(pst->st));
    LinkStackInit(&(pst->min_st));
    return pst;
}

void minStackPush(MinStack* obj, int x) 
{
    LinkStackPush(&(obj->st), x);
    if(LinkStackIsEmpty(&(obj->min_st)) || x<=LinkStackTop(&(obj->min_st)))
        LinkStackPush(&(obj->min_st), x);
}

void minStackPop(MinStack* obj) 
{
    int val = LinkStackTop(&(obj->st));
    LinkStackPop(&(obj->st));

    if(val == LinkStackTop(&(obj->min_st)))
        LinkStackPop(&(obj->min_st));
}

int minStackTop(MinStack* obj) 
{
    return LinkStackTop(&(obj->st));
}

int minStackGetMin(MinStack* obj) 
{
    return LinkStackTop(&(obj->min_st));
}

void minStackFree(MinStack* obj) 
{
    LinkStackDestroy(&(obj->st));
    LinkStackDestroy(&(obj->min_st));
    free(obj);
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/

5、https://leetcode-cn.com/problems/design-circular-queue/ [设计循环队列]
typedef struct 
{
    int *base;
    int capacity;
    int front;
    int rear;
} MyCircularQueue;


MyCircularQueue* myCircularQueueCreate(int k) 
{
    MyCircularQueue *pcq = (MyCircularQueue*)malloc(sizeof(MyCircularQueue));
    pcq->capacity = k;  
    pcq->base = (int*)malloc(sizeof(int)*(pcq->capacity+1));
    pcq->front = pcq->rear = 0;
    return pcq;
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) 
{
    return obj->front == obj->rear;
}

bool myCircularQueueIsFull(MyCircularQueue* obj) 
{
    return (obj->rear+1)%(obj->capacity+1) == obj->front;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value)
{
    if(myCircularQueueIsFull(obj))
        return false;
    obj->base[obj->rear] = value;
    obj->rear = (obj->rear+1) % (obj->capacity+1);
    return true;
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return false;
    
    obj->front = (obj->front+1) % (obj->capacity+1);
    return true;
}

int myCircularQueueFront(MyCircularQueue* obj)
{
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[obj->front];
}

int myCircularQueueRear(MyCircularQueue* obj) 
{
    if(myCircularQueueIsEmpty(obj))
        return -1;
    return obj->base[(obj->rear-1 + obj->capacity+1) % (obj->capacity+1)];
}


void myCircularQueueFree(MyCircularQueue* obj) 
{
    free(obj->base);
    obj = NULL;
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/



五、二叉树 基础OJ
1、https://leetcode-cn.com/problems/binary-tree-preorder-traversal/ [二叉树的前序遍历]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int size(struct TreeNode *t)
{
    if(t == NULL)
        return 0;
    else
        return size(t->left) + size(t->right) + 1;
}

void _preorderTraversal(struct TreeNode *root, int *preorder_array, int *i)
{
    if(root != NULL)
    {
        preorder_array[*i] = root->val;
        (*i)++;
        _preorderTraversal(root->left, preorder_array, i);
        _preorderTraversal(root->right, preorder_array, i);
    }
}

int* preorderTraversal(struct TreeNode* root, int* returnSize)
{
    int n = size(root); //
    int *preorder_array = (int*)malloc(sizeof(int) * n);
    *returnSize = n;

    // 遍历
    int index = 0;
    _preorderTraversal(root, preorder_array, &index);

    return preorder_array;
}

4、https://leetcode-cn.com/problems/same-tree/ [相同的树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


bool isSameTree(struct TreeNode* p, struct TreeNode* q)
{
    if(p==NULL && q==NULL)
        return true;
    if(p==NULL || q==NULL)
        return false;

    return p->val==q->val && isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
}

5、https://leetcode-cn.com/problems/subtree-of-another-tree/ [另一个树的子树]
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

bool _isSametree(struct TreeNode *s, struct TreeNode *t)
{
    if(s==NULL && t==NULL)
        return true;
    if(s==NULL || t==NULL)
        return false;
    
    return s->val==t->val && _isSametree(s->left, t->left) && _isSametree(s->right, t->right);
}

bool isSubtree(struct TreeNode* s, struct TreeNode* t)
{
    if(t == NULL)
        return true;
    if(s == NULL)
        return false;

    if(_isSametree(s, t))
        return true;
    
    return isSubtree(s->left, t) || isSubtree(s->right, t);
}





